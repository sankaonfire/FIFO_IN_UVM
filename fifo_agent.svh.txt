class fifo_agent extends uvm_agent;
  
  `uvm_component_utils(fifo_agent)

  uvm_active_passive_enum is_active;
  fifo_monitor monitor;
  fifo_driver driver;
  uvm_sequencer#(fifo_transaction) sequencer;
  
  function new(string name, uvm_component parent);
    super.new(name,parent);
  endfunction
  
  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    //if(is_active == UVM_ACTIVE) begin
      driver = fifo_driver::type_id::create("driver",this);
      sequencer = uvm_sequencer#(fifo_transaction)::type_id::create("sequencer",this);
    //end
    monitor = fifo_monitor::type_id::create("monitor",this);
  endfunction
  
  function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    //if(is_active == UVM_ACTIVE) begin
      driver.seq_item_port.connect(sequencer.seq_item_export);
    //end
  endfunction
  
  task run_phase(uvm_phase phase);
      // We raise objection to keep the test from completing
      phase.raise_objection(this);
      begin
        fifo_sequence seq;
        seq = fifo_sequence::type_id::create("seq");
        seq.start(sequencer);
      end
      // We drop objection to allow the test to complete
      phase.drop_objection(this);
  endtask

  
endclass:fifo_agent
    
    
      
      